name: Test Docker Swarm Method

on:
  workflow_call:
    inputs:
      test_scale_count:
        description: 'Number of instances to test scaling'
        required: false
        default: '3'
        type: string
    outputs:
      test_results:
        description: 'JSON formatted test results'
        value: ${{ jobs.test-swarm.outputs.test_results }}
      success_count:
        description: 'Number of successful tests'
        value: ${{ jobs.test-swarm.outputs.success_count }}
      total_count:
        description: 'Total number of tests'
        value: ${{ jobs.test-swarm.outputs.total_count }}

env:
  DOCKER_BUILDKIT: 1
  TEST_SCALE_COUNT: ${{ inputs.test_scale_count || '3' }}

jobs:
  test-swarm:
    runs-on: ubuntu-latest
    name: Docker Swarm Method Tests
    timeout-minutes: 30
    outputs:
      test_results: ${{ steps.collect-results.outputs.results }}
      success_count: ${{ steps.collect-results.outputs.success_count }}
      total_count: ${{ steps.collect-results.outputs.total_count }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create empty wow-client directory
      run: |
        mkdir -p wow-client
        echo "Created empty wow-client directory for testing"
        
    - name: Make scripts executable
      run: |
        chmod +x manage-clients-swarm.sh
        
    - name: Test Swarm - Initialize
      id: test-init
      run: |
        echo "=== Testing Swarm Method - Initialize ==="
        if ./manage-clients-swarm.sh init; then
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=Swarm initialization completed successfully" >> $GITHUB_OUTPUT
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Swarm initialization failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Deploy with 2 instances
      id: test-deploy
      run: |
        echo "=== Testing Swarm Method - Deploy ==="
        if timeout 300 ./manage-clients-swarm.sh deploy 2; then
          sleep 15
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=Stack deployed with 2 instances successfully" >> $GITHUB_OUTPUT
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Stack deployment failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Status Check
      id: test-status
      run: |
        echo "=== Testing Swarm Method - Status ==="
        if ./manage-clients-swarm.sh status; then
          echo "Services:"
          docker service ls
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=Status check completed successfully" >> $GITHUB_OUTPUT
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Status check failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Scale Up
      id: test-scale-up
      run: |
        echo "=== Testing Swarm Method - Scale Up to $TEST_SCALE_COUNT ==="
        if ./manage-clients-swarm.sh scale $TEST_SCALE_COUNT; then
          sleep 10
          ./manage-clients-swarm.sh status
          # Verify scaling
          replicas=$(docker service inspect wow-clients_wow-client --format='{{.Spec.Replicas}}' 2>/dev/null || echo "0")
          if [ "$replicas" = "$TEST_SCALE_COUNT" ]; then
            echo "result=PASS" >> $GITHUB_OUTPUT
            echo "message=Scaled up to $TEST_SCALE_COUNT instances successfully" >> $GITHUB_OUTPUT
          else
            echo "result=PARTIAL" >> $GITHUB_OUTPUT
            echo "message=Scale command executed but replicas=$replicas (expected=$TEST_SCALE_COUNT)" >> $GITHUB_OUTPUT
          fi
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Failed to scale up to $TEST_SCALE_COUNT instances" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Service Health Check
      id: test-health
      run: |
        echo "=== Testing Swarm Method - Service Health ==="
        sleep 10
        running_tasks=$(docker service ps wow-clients_wow-client --filter "desired-state=running" --format "{{.CurrentState}}" | grep -c "Running" || echo "0")
        total_tasks=$(docker service ps wow-clients_wow-client --filter "desired-state=running" --format "{{.ID}}" | wc -l)
        
        if [ "$running_tasks" -gt 0 ]; then
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=Service health check passed - $running_tasks/$total_tasks tasks running" >> $GITHUB_OUTPUT
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Service health check failed - no running tasks" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - VNC Port Verification
      id: test-vnc-ports
      run: |
        echo "=== Testing Swarm Method - VNC Port Verification ==="
        # In swarm mode, services use published ports, check if any VNC ports are accessible
        vnc_accessible=0
        
        # Check standard VNC ports that might be published
        for port in 5900 5901 5902; do
          if netstat -tuln | grep -q ":$port "; then
            echo "✅ VNC port $port is accessible"
            ((vnc_accessible++))
          else
            echo "ℹ️ VNC port $port not accessible (may be internal)"
          fi
        done
        
        # Also check if we can connect to any published ports on the service
        service_ports=$(docker service inspect wow-clients_wow-client --format='{{range .Endpoint.Ports}}{{.PublishedPort}} {{end}}' 2>/dev/null || echo "")
        
        if [ -n "$service_ports" ] || [ $vnc_accessible -gt 0 ]; then
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=VNC ports verification passed - accessible ports or service ports found" >> $GITHUB_OUTPUT
        else
          echo "result=PARTIAL" >> $GITHUB_OUTPUT
          echo "message=VNC ports may be accessible internally but not externally verified" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Scale Down
      id: test-scale-down
      run: |
        echo "=== Testing Swarm Method - Scale Down ==="
        if ./manage-clients-swarm.sh scale 1; then
          sleep 5
          ./manage-clients-swarm.sh status
          # Verify scaling down
          replicas=$(docker service inspect wow-clients_wow-client --format='{{.Spec.Replicas}}' 2>/dev/null || echo "0")
          if [ "$replicas" = "1" ]; then
            echo "result=PASS" >> $GITHUB_OUTPUT
            echo "message=Scaled down to 1 instance successfully" >> $GITHUB_OUTPUT
          else
            echo "result=PARTIAL" >> $GITHUB_OUTPUT
            echo "message=Scale down command executed but replicas=$replicas (expected=1)" >> $GITHUB_OUTPUT
          fi
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Failed to scale down" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Stop Stack
      id: test-stop
      run: |
        echo "=== Testing Swarm Method - Stop Stack ==="
        if ./manage-clients-swarm.sh stop; then
          sleep 10
          # Verify stack removal
          if docker stack ls --format "{{.Name}}" | grep -q "^wow-clients$"; then
            echo "result=PARTIAL" >> $GITHUB_OUTPUT
            echo "message=Stop command executed but stack still exists" >> $GITHUB_OUTPUT
          else
            echo "result=PASS" >> $GITHUB_OUTPUT
            echo "message=Stack stopped and removed successfully" >> $GITHUB_OUTPUT
          fi
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Stack stop failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Clean All
      id: test-clean-all
      run: |
        echo "=== Testing Swarm Method - Clean All ==="
        if echo "y" | ./manage-clients-swarm.sh clean-all; then
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=Clean all completed successfully" >> $GITHUB_OUTPUT
        else
          echo "result=PARTIAL" >> $GITHUB_OUTPUT
          echo "message=Clean all completed with warnings" >> $GITHUB_OUTPUT
        fi
        
    - name: Verify Swarm Cleanup
      id: test-cleanup-verify
      run: |
        echo "=== Verifying Swarm Method Cleanup ==="
        stacks=$(docker stack ls --format "{{.Name}}" | grep -c "wow-clients" || echo "0")
        services=$(docker service ls --format "{{.Name}}" | grep -c "wow-clients" || echo "0")
        
        if [ $stacks -eq 0 ] && [ $services -eq 0 ]; then
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=Cleanup verification passed - no stacks or services remaining" >> $GITHUB_OUTPUT
        else
          echo "result=FAIL" >> $GITHUB_OUTPUT
          echo "message=Cleanup verification failed - $stacks stacks, $services services remaining" >> $GITHUB_OUTPUT
        fi
        
    - name: Test Swarm - Leave Swarm Mode
      id: test-leave-swarm
      run: |
        echo "=== Testing Swarm Method - Leave Swarm Mode ==="
        if docker swarm leave --force; then
          echo "result=PASS" >> $GITHUB_OUTPUT
          echo "message=Left swarm mode successfully" >> $GITHUB_OUTPUT
        else
          echo "result=PARTIAL" >> $GITHUB_OUTPUT
          echo "message=Leave swarm command completed with warnings" >> $GITHUB_OUTPUT
        fi
        
    - name: Collect Test Results
      id: collect-results
      run: |
        # Create JSON results
        cat << 'EOF' > test_results.json
        {
          "swarm_init": {
            "result": "${{ steps.test-init.outputs.result }}",
            "message": "${{ steps.test-init.outputs.message }}"
          },
          "stack_deploy": {
            "result": "${{ steps.test-deploy.outputs.result }}",
            "message": "${{ steps.test-deploy.outputs.message }}"
          },
          "status_check": {
            "result": "${{ steps.test-status.outputs.result }}",
            "message": "${{ steps.test-status.outputs.message }}"
          },
          "scale_up": {
            "result": "${{ steps.test-scale-up.outputs.result }}",
            "message": "${{ steps.test-scale-up.outputs.message }}"
          },
          "service_health": {
            "result": "${{ steps.test-health.outputs.result }}",
            "message": "${{ steps.test-health.outputs.message }}"
          },
          "vnc_ports": {
            "result": "${{ steps.test-vnc-ports.outputs.result }}",
            "message": "${{ steps.test-vnc-ports.outputs.message }}"
          },
          "scale_down": {
            "result": "${{ steps.test-scale-down.outputs.result }}",
            "message": "${{ steps.test-scale-down.outputs.message }}"
          },
          "stack_stop": {
            "result": "${{ steps.test-stop.outputs.result }}",
            "message": "${{ steps.test-stop.outputs.message }}"
          },
          "clean_all": {
            "result": "${{ steps.test-clean-all.outputs.result }}",
            "message": "${{ steps.test-clean-all.outputs.message }}"
          },
          "cleanup_verify": {
            "result": "${{ steps.test-cleanup-verify.outputs.result }}",
            "message": "${{ steps.test-cleanup-verify.outputs.message }}"
          },
          "leave_swarm": {
            "result": "${{ steps.test-leave-swarm.outputs.result }}",
            "message": "${{ steps.test-leave-swarm.outputs.message }}"
          }
        }
        EOF
        
        # Count successes
        success_count=$(cat test_results.json | grep -o '"result": "PASS"' | wc -l)
        partial_count=$(cat test_results.json | grep -o '"result": "PARTIAL"' | wc -l)
        total_count=11
        
        echo "results=$(cat test_results.json | tr -d '\n')" >> $GITHUB_OUTPUT
        echo "success_count=$success_count" >> $GITHUB_OUTPUT
        echo "total_count=$total_count" >> $GITHUB_OUTPUT
        echo "partial_count=$partial_count" >> $GITHUB_OUTPUT
        
        echo "=== Swarm Method Test Summary ==="
        echo "✅ Passed: $success_count/$total_count"
        echo "⚠️  Partial: $partial_count/$total_count"
        echo "❌ Failed: $((total_count - success_count - partial_count))/$total_count"
        
    - name: Upload Swarm Test Results
      uses: actions/upload-artifact@v4
      with:
        name: swarm-test-results
        path: test_results.json
        retention-days: 7
